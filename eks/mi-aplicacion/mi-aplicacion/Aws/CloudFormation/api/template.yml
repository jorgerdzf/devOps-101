AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: "ImmsExchange Template Format"

Parameters:
  ApplicationName:
    Description: App name
    Type: String
  EnvironmentType:
    Description: The environment type
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: must be a dev, test or prod

Resources:
  MiAplicacionEksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ApplicationName}-eks-role-${EnvironmentType}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  # ECR reposi
  MiAplicacionECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ApplicationName}-repo-${EnvironmentType}"
  # VPC creation
  MiAplicacionVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}VPC-${EnvironmentType}"
  # First public subnet us-east-2a
  MiAplicacionPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MiAplicacionVPC
      AvailabilityZone: us-east-2a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-PublicSubnet1-${EnvironmentType}"
  # Second public subnet us-east-2b
  MiAplicacionPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MiAplicacionVPC
      AvailabilityZone: us-east-2b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ApplicationName}-PublicSubnet2-${EnvironmentType}"
  # EKS security group
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EKS cluster
      VpcId: !Ref MiAplicacionVPC
  # EKS Cluster
  MiAplicacionKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${ApplicationName}-cluster-${EnvironmentType}"
      RoleArn: !GetAtt MiAplicacionEksClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref MiAplicacionPublicSubnet1
          - !Ref MiAplicacionPublicSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
      Version: "1.27" # Check versions

Outputs:
  RepositoryName:
    Description: Name of the ECR Repo
    Value: !Ref MiAplicacionECRRepository
  ClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref MiAplicacionKSCluster